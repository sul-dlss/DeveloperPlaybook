## Infrastructure .rubocop.yml template

require:
  - rubocop-rails # rails only
  - rubocop-rspec

inherit_from: .rubocop_todo.yml

AllCops:
  TargetRubyVersion: 3.1
  SuggestExtensions: false
  DisplayCopNames: true
  Include:
    - './Rakefile' # rake only
    - './config.ru' # rails only
    - '**/*.rb'
    - '**/*.rake' # rake only
  Exclude:
    # autogenerated files (that we don't change) should go here
    - 'bin/**/*'
    - 'config/environments/*.rb' # rails only
    - 'config/routes.rb' # rails only
    - 'db/**/*' # rails only
    - 'spec/spec_helper.rb'
    - 'spec/rails_helper.rb' # rails only
    - 'vendor/**/*' # gems only (?)

Bundler/GemComment:
  OnlyFor:
    - restrictive_version_specifiers
    - branch

# Configuration parameters: AllowURI, URISchemes.
Layout/LineLength:
  Max: 120

Metrics/BlockLength:
  IgnoredMethods:
    - SimpleForm.setup # simple_form only (rails form handling)
    - FactoryBot.define # factory_bot only
    - factory # factory_bot only
    - describe
    - context

# consider if refactoring will improve adherence to SOLID and/or improve readability
#  Sometimes splitting the class up won't improve readablity, it just makes reader jump around in the code.
Metrics/ClassLength:
  Max: 150 # default 100

# consider if refactoring will improve adherence to SOLID and/or improve readability
#  Sometimes splitting the method up won't improve readablity, it just makes reader jump around in the code.
#  Good method names help.
Metrics/MethodLength:
  Max: 15 # default 10

RSpec/DescribeClass:
  Exclude:
    - 'spec/views/**/*_spec.rb' # In view tests, the view is named, not the class   # rails only

# do try to keep examples short (can you split out the setup from the test?)
RSpec/ExampleLength:
  Enabled: false

# most tests should test a single thing
RSpec/MultipleExpectations:
  Max: 5 # default 1
  Exclude:
    - 'spec/features/**/*_spec.rb'

RSpec/MultipleMemoizedHelpers:
  Enabled: false

RSpec/NestedGroups:
  Max: 4 # default: 3
  
